import string;
import ds/list;
import ds/array;
import lingo/pegcode/driver;

grammar = compilePegGrammar("#include predicates.lingo");

PredTerm ::= PredVar, PredFunc;
    PredVar(x: string);
    PredFunc(name: string, args: [PredTerm]);

Form ::= FormAtom, FormAll, FormEx, FormAnd, FormOr, FormNot;
    FormAtom(name: string, args: [PredTerm]);
    FormAll(var: string, p: Form);
    FormEx(var: string, p: Form);
    FormAnd(lhs: Form, rhs: Form);
    FormOr(lhs: Form, rhs: Form);
    FormNot(p: Form);


NNF ::= NNFLiteral, NNFAll, NNFEx, NNFAnd, NNFOr;
    NNFLiteral(sign: bool, name: string, args: [PredTerm]);
    NNFAll(var: string, p: NNF);
    NNFEx(var: string, p: NNF);
    NNFAnd(lhs: NNF, rhs: NNF);
    NNFOr(lhs: NNF, rhs: NNF);


toNNF(phi: Form) -> NNF {
    switch(phi) {
        FormNot(psi): {
            switch(psi) {
                FormNot(p): {
                    toNNF(p);
                }
                FormAtom(name, args): {
                    NNFLiteral(false, name, args);
                }
                FormAll(var, p): {
                    NNFEx(var, toNNF(FormNot(p)));
                }
                FormEx(var, p): {
                    NNFAll(var, toNNF(FormNot(p)));
                }
                FormAnd(lhs, rhs): {
                    NNFOr(toNNF(FormNot(lhs)), toNNF(FormNot(rhs)));
                }
                FormOr(lhs, rhs): {
                    NNFAnd(toNNF(FormNot(lhs)), toNNF(FormNot(rhs)));
                }
            }
        }
        FormAtom(name, args): {
            NNFLiteral(true, name, args);
        }
        FormAll(var, p): {
            NNFAll(var, toNNF(p));
        }
        FormEx(var, p): {
            NNFEx(var, toNNF(p));
        }
        FormAnd(lhs, rhs): {
            NNFAnd(toNNF(lhs), toNNF(rhs));
        }
        FormOr(lhs, rhs): {
            NNFOr(toNNF(lhs), toNNF(rhs));
        }
    }
}

PredTerm2string(t: PredTerm) -> string {
    switch(t) {
        PredVar(x): x;
        PredFunc(f, as): f + "(" + strGlue(map(as, PredTerm2string), ", ") + ")";
    }
}

Form2string(phi : Form) -> string {
    switch(phi) {
        FormAtom(p, as): p + "(" + strGlue(map(as, PredTerm2string), ", ") + ")";
        FormAll(var, p): "A" + var + " " + Form2string(p);
        FormEx(var, p): "E" + var + " " + Form2string(p);
        FormAnd(lhs, rhs): "(" + Form2string(lhs) + " & " + Form2string(rhs) + ")";
        FormOr(lhs, rhs): "(" + Form2string(lhs) + " | " + Form2string(rhs) + ")";
        FormNot(p): "!" + Form2string(p);
    }
}

NNF2string(phi : NNF) -> string {
    switch(phi) {
        NNFLiteral(s, p, as): (if (s) "" else "!") + p + "(" + strGlue(map(as, PredTerm2string), ", ") + ")";
        NNFAll(var, p): "A" + var + " " + NNF2string(p);
        NNFEx(var, p): "E" + var + " " + NNF2string(p);
        NNFAnd(lhs, rhs): "(" + NNF2string(lhs) + " & " + NNF2string(rhs) + ")";
        NNFOr(lhs, rhs): "(" + NNF2string(lhs) + " | " + NNF2string(rhs) + ")";
    }
}

substPredTerm(pt: PredTerm, v: string, new_name: string) {
    switch(pt) {
        PredVar(x): if (x == v) PredVar(new_name) else pt;
        PredFunc(f, as): PredFunc(f, map(as, \t -> substPredTerm(t, v, new_name)));
    }
}

substNNF(psi: NNF, v: string, new_name: string) {
    switch(psi) {
        NNFLiteral(s, p, as): NNFLiteral(s, p, map(as, \t -> substPredTerm(t, v, new_name)));
        NNFAll(x, p): if (x == v) psi else NNFAll(x, substNNF(p, v, new_name));
        NNFEx(x, p): if (x == v) psi else NNFEx(x, substNNF(p, v, new_name));
        NNFAnd(l, r): NNFAnd(substNNF(l, v, new_name), substNNF(r, v, new_name));
        NNFOr(l, r): NNFOr(substNNF(l, v, new_name), substNNF(r, v, new_name));
    }
}

var_names_helper = ref 0;
standartizeNNF(psi: NNF) -> NNF {
    switch(psi) {
        NNFAll(x, p): {
            new_name = "_x" + i2s(^var_names_helper);
            var_names_helper := ^var_names_helper + 1;
            NNFAll(new_name, standartizeNNF(substNNF(p, x, new_name)));
        }
        NNFEx(x, p): {
            new_name = "_x" + i2s(^var_names_helper);
            var_names_helper := ^var_names_helper + 1;
            NNFEx(new_name, standartizeNNF(substNNF(p, x, new_name)));
        }
        NNFLiteral(s, n, as): psi;
        NNFAnd(l, r): psi;
        NNFOr(l, r): psi;
    }
}



main() {
    s = "Ax !Ey (less(plus(x, y), y) -> more(y, x))";
    s2 = "Ay P()";
    e = parsic(grammar, s, defaultPegActions);
    estand = standartizeNNF(toNNF(e));
    var_names_helper := 0;
    println(Form2string(e));
    println(NNF2string(estand));
    println("");
    // println(toNNF(e));
    e2 = parsic(grammar, s2, defaultPegActions);
    println(e2);
}