form = pred | and | or | not | arr | all | ex;

and = ws "(" form:lhs "&" form:rhs ")" ws { FormAnd(:lhs, :rhs) };
or = ws "(" form:lhs "|" form:rhs ")" ws { FormOr(:lhs, :rhs) };
not = ws "!" form:f ws { FormNot(:f) };
arr = ws "(" form:from "->" form:to ")" ws { FormOr(FormNot(:from), :to) };

all = ws "A" ws symb$x ' ' form:f ws { FormAll($x, :f) };
ex = ws "E" ws symb$x ' ' form:f ws { FormEx($x, :f) };

pred = ws symb$p ws "(" term*:as ")" ws { Atom($p, :as) };

term = func | var;
var = ws symb$x ws ","? ws { PredVar($x) };
func = ws symb$f ws "(" term*:as ")" ws ","? ws { PredFunc($f, :as) };

symb = ('a'-'z' | 'A'-'Z')+;
ws = ' '*;